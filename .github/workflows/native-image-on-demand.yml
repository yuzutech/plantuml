name: Native Images On-Demand

run-name: Native Images ${{ inputs.tag }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      tag:
        required: true

defaults:
  run:
    shell: bash

jobs:
  build_artifacts:
    outputs:
      release_version: ${{ steps.version.outputs.release_version }}
    runs-on: ubuntu-latest
    steps:
      - name: Set release version
        id: version
        env:
          REF: ${{ github.event.inputs.tag }}
        run: |
          echo "release_version=${REF#v}" >> $GITHUB_ENV
          echo "release_version=${REF#v}" >> $GITHUB_OUTPUT
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          ref: "refs/tags/${{ github.event.inputs.tag }}"

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Set version from tag
        env:
          RELEASE_VERSION: ${{ env.release_version }}
        run: sed -i "s/version = .*/version = $RELEASE_VERSION/" gradle.properties

      - name: Build artifacts
        run: |
          gradle -q clean build \
            pdfJar \
            -x test

      - name: Cache libs
        uses: actions/cache/save@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
          key: "libs-${{ github.run_id }}"
          enableCrossOsArchive: true

  native_images:
    needs: build_artifacts
    uses: ./.github/workflows/native-image.yml
    with:
      release-version: ${{ needs.build_artifacts.outputs.release_version }}

  native_arm_image:
    needs: build_artifacts
    runs-on: [ self-hosted, ARM64 ]
    steps:
      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          rm -rf ./build/libs
          rm -rf ./build/publications
          rm -rf ./plantuml-asl/build/libs
          rm -rf ./plantuml-bsd/build/libs
          rm -rf ./plantuml-epl/build/libs
          rm -rf ./plantuml-lgpl/build/libs
          rm -rf ./plantuml-mit/build/libs

      - uses: actions/cache/restore@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
          key: "libs-${{ github.run_id }}"
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Generate GraalVM configuration
        run: |
          mkdir -p native-image-config-dir
          echo 'Bob->Alice: Hello' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-output-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tpng -pipe
          echo 'Bob->Alice: Hello' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tpdf -pipe
          echo 'Bob->Alice: Hello' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -ttxt -pipe
          echo 'Bob->Alice: Hello' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tuxt -pipe
          echo 'Bob->Alice: Hello' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tsvg -pipe -theme minty
          echo 'help themes' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tsvg -pipe
          echo 'class Test{}' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tsvg -pipe
          echo 'error' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tsvg -pipe || true
          printf '!include <C4/C4_Context>\n\ntitle System Context diagram for Internet Banking System\n\nPerson(customer, "Banking Customer", "A customer of the bank, with personal bank accounts.")\n\nSystem(banking_system, "Internet Banking System", "Allows customers to check their accounts.")\n\nSystem_Ext(mail_system, "E-mail system", "The internal Microsoft Exchange e-mail system.")\nSystem_Ext(mainframe, "Mainframe Banking System", "Stores all of the core banking information.")\n\nRel(customer, banking_system, "Uses")\nRel_Back(customer, mail_system, "Sends e-mails to")\nRel_Neighbor(banking_system, mail_system, "Sends e-mails", "SMTP")\nRel(banking_system, mainframe, "Uses")' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tpdf -pipe
          printf '!include <archimate/Archimate>\n\ntitle Archimate Sample - Internet Browser\n\nBusiness_Object(businessObject, \"A Business Object\")' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tsvg -pipe
          printf '!include <awslib/AWSCommon.puml>\n!include <awslib/Groups/all.puml>\n\nAWSCloudGroup(cloud) {\n}' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tsvg -pipe
          printf 'listopeniconic' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tsvg -pipe
          printf 'set separator none\n\nleft to right direction\n\nskinparam {\n  arrowFontSize 10\n  defaultTextAlignment center\n  wrapWidth 200\n  maxMessageSize 100\n}\n\nhide stereotype\n\nskinparam rectangle<<Live.AmazonWebServices>> {\n  BackgroundColor #ffffff\n  FontColor #232f3e\n  BorderColor #232f3e\n  roundCorner 20\n  shadowing false\n}\n\nrectangle "Amazon Web Services\\n<size:10>[Deployment Node]</size>\\n\\n<img:https://static.structurizr.com/themes/amazon-web-services-2020.04.30/AWS-Cloud_light-bg@4x.png{scale=0.21428571428571427}>" <<Live.AmazonWebServices>> as Live.AmazonWebServices {\n}' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -tsvg -pipe
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.release_version }}

      - name: Generate native image
        run: |
          echo '{"resources":{"includes":[{"pattern": ".*\\.js$"}, {"pattern": ".*\\.css$"}, {"pattern": ".*\\.repx$"}, {"pattern": ".*\\.puml$"}, {"pattern": ".*\\.skin$"}, {"pattern": ".*\\.txt$"}, {"pattern": ".*\\.png$"}, {"pattern": ".*\\.svg$"}]}}' > resource-config.json
          native-image -H:ResourceConfigurationFiles=resource-config.json -H:ConfigurationFileDirectories=native-image-config-dir --no-fallback --enable-https --report-unsupported-elements-at-runtime -jar "build/libs/plantuml-pdf-$RELEASE_VERSION.jar" -H:Path="build/libs" -H:Name="plantuml-linux-arm64-$RELEASE_VERSION"
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.release_version }}

      - name: Cache native image
        uses: actions/cache/save@v3
        with:
          path: "build/libs/plantuml-linux-arm64-*"
          key: "native-image-linux-arm64-${{ github.run_id }}"
          enableCrossOsArchive: true

  upload:
    needs: [ build_artifacts, native_images, native_arm_image ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Restore Libs cache
        uses: actions/cache/restore@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
          key: "libs-${{ github.run_id }}"
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Restore Native-image-darwin-amd64 cache
        uses: actions/cache/restore@v3
        with:
          path: "build/libs/plantuml-darwin-amd64-*"
          key: "native-image-darwin-amd64-${{ github.run_id }}"
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Restore Native-image-win-amd64 cache
        uses: actions/cache/restore@v3
        with:
          path: "build/libs/plantuml-win-amd64-*"
          key: "native-image-win-amd64-${{ github.run_id }}"
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Restore Native-image-linux-amd64 cache
        uses: actions/cache/restore@v3
        with:
          path: "build/libs/plantuml-linux-amd64-*"
          key: "native-image-linux-amd64-${{ github.run_id }}"
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Restore Native-image-linux-arm64 cache
        uses: actions/cache/restore@v3
        with:
          path: "build/libs/plantuml-linux-arm64-*"
          key: "native-image-linux-arm64-${{ github.run_id }}"
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Create release
        run: |
          gh release view "v$RELEASE_VERSION" || gh release create "v$RELEASE_VERSION"
          gh release upload "v$RELEASE_VERSION" ./build/libs/plantuml-darwin-* ./build/libs/plantuml-linux-* ./build/libs/plantuml-win-* --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.release_version }}
