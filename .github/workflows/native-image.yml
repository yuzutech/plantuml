name: Native Image

on:
  workflow_call:
    inputs:
      release-version:
        required: true
        type: string

jobs:
  build_non_win_images:
    name: 'Build Native Image ${{ matrix.platform }}'
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        include:
          - os: 'ubuntu-latest'
            platform: 'linux-amd64'
          - os: 'macos-latest'
            platform: 'darwin-amd64'
          - os: 'windows-latest'
            platform: 'win-amd64'
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install graphviz on Ubuntu
        run: sudo apt-get install -y graphviz
        if: matrix.platform == 'linux-amd64'

      - name: Install graphviz on macOS
        run: brew install graphviz
        if: matrix.platform == 'darwin-amd64'

      - name: Install graphviz on Windows
        run: choco install graphviz
        if:  matrix.platform == 'win-amd64'

      - uses: actions/cache/restore@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs
          key: "libs-${{ github.run_id }}"
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Generate GraalVM configuration
        shell: bash
        run: |
          mkdir native-image-config-dir
          echo 'Bob->Alice: Hello' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-output-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-${{ inputs.release-version }}.jar" -tpng -pipe
          echo 'Bob->Alice: Hello' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-${{ inputs.release-version }}.jar" -tpdf -pipe
          echo 'Bob->Alice: Hello' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-${{ inputs.release-version }}.jar" -ttxt -pipe
          echo 'Bob->Alice: Hello' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-${{ inputs.release-version }}.jar" -tuxt -pipe
          echo 'Bob->Alice: Hello' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-${{ inputs.release-version }}.jar" -tsvg -pipe -theme minty
          echo 'help themes' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-${{ inputs.release-version }}.jar" -tsvg -pipe
          echo 'error' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-${{ inputs.release-version }}.jar" -tsvg -pipe > out.svg || true
          printf '!include <C4/C4_Context>\n\ntitle System Context diagram for Internet Banking System\n\nPerson(customer, "Banking Customer", "A customer of the bank, with personal bank accounts.")\n\nSystem(banking_system, "Internet Banking System", "Allows customers to check their accounts.")\n\nSystem_Ext(mail_system, "E-mail system", "The internal Microsoft Exchange e-mail system.")\nSystem_Ext(mainframe, "Mainframe Banking System", "Stores all of the core banking information.")\n\nRel(customer, banking_system, "Uses")\nRel_Back(customer, mail_system, "Sends e-mails to")\nRel_Neighbor(banking_system, mail_system, "Sends e-mails", "SMTP")\nRel(banking_system, mainframe, "Uses")' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-${{ inputs.release-version }}.jar" -tpdf -pipe
          printf '!include <archimate/Archimate>\n\ntitle Archimate Sample - Internet Browser\n\nBusiness_Object(businessObject, \"A Business Object\")' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-${{ inputs.release-version }}.jar" -tsvg -pipe
          printf 'set separator none\n\nleft to right direction\n\nskinparam {\n  arrowFontSize 10\n  defaultTextAlignment center\n  wrapWidth 200\n  maxMessageSize 100\n}\n\nhide stereotype\n\nskinparam rectangle<<Live.AmazonWebServices>> {\n  BackgroundColor #ffffff\n  FontColor #232f3e\n  BorderColor #232f3e\n  roundCorner 20\n  shadowing false\n}\n\nrectangle "Amazon Web Services\\n<size:10>[Deployment Node]</size>\\n\\n<img:https://static.structurizr.com/themes/amazon-web-services-2020.04.30/AWS-Cloud_light-bg@4x.png{scale=0.21428571428571427}>" <<Live.AmazonWebServices>> as Live.AmazonWebServices {\n}' | java -Djava.awt.headless=true -agentlib:native-image-agent=config-merge-dir=native-image-config-dir -jar "./build/libs/plantuml-pdf-${{ inputs.release-version }}.jar" -tsvg -pipe

      - name: Generate native image
        run: |
          echo '{"resources":{"includes":[{"pattern": ".*\\.js$"}, {"pattern": ".*\\.css$"}, {"pattern": ".*\\.repx$"}, {"pattern": ".*\\.puml$"}, {"pattern": ".*\\.skin$"}, {"pattern": ".*\\.txt$"}, {"pattern": ".*\\.png$"}]}}' > resource-config.json
          native-image -H:ResourceConfigurationFiles=resource-config.json -H:ConfigurationFileDirectories=native-image-config-dir --no-fallback --enable-https --report-unsupported-elements-at-runtime -jar "build/libs/plantuml-pdf-${{ inputs.release-version }}.jar" -H:Path="build/libs" -H:Name="plantuml-${{ matrix.platform }}-${{ inputs.release-version }}"

      - name: Cache native image
        uses: actions/cache/save@v3
        with:
          path: "build/libs/plantuml-${{ matrix.platform }}-*"
          key: "native-image-${{ matrix.platform }}-${{ github.run_id }}"
          enableCrossOsArchive: true
